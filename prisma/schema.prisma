generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId Int @id @default(autoincrement()) @map("userId")
  email String @unique @map("email")
  name String @map("name")
  password String @map("password")
  address String @map("address")
  type Boolean @map("type")
  point Int @map("point") @default(100000)
  createdAt         DateTime            @default(now()) @map("createdAt")
  updatedAt         DateTime            @updatedAt @map("updatedAt")

  store Store?
  order Order[]
  review Review[]

  @@map("Users")
}

model Store {
  storeId Int @id @default(autoincrement()) @map("storeId")
  userId Int @unique @map("userId")
  storeName String @map("storeName")
  foodType String @map("foodType")
  sales Int @map("sales")
  createdAt         DateTime            @default(now()) @map("createdAt")
  updatedAt         DateTime            @updatedAt @map("updatedAt")

  review Review[]
  menu Menu[]
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  @@map("Stores")
}

model Menu {
  menuId Int @id @default(autoincrement()) @map("menuId")
  storeId Int @map("storeId")
  menuName String @map("menuName")
  image String @map("image")
  price Int @map("price")
  stock Int @map("stock")
  createdAt         DateTime            @default(now()) @map("createdAt")
  updatedAt         DateTime            @updatedAt @map("updatedAt")

  orderMenu OrderMenu?
  store Store @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  
  @@unique([storeId, menuName])
  @@map("Menus")
}

model Order {
  orderId Int @id @default(autoincrement()) @map("orderId")
  userId Int @map("userId")
  menuId Int @map("menuId")
  statement Statement @map("statement")
  createdAt         DateTime            @default(now()) @map("createdAt")

  orderMenu OrderMenu[]
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("Orders")
}
enum Statement {
  PREPARE // 주문 준비중
  IN_DELIVERY // 배달중
  DELIVERY_COMPLETE // 배달 완료
} 

model OrderMenu {
  orderMenuId Int @id @default(autoincrement()) @map("orderMenuId")
  orderId     Int @map("oderId")
  menuId    Int @unique @map("menuId")
  quantity    Int @map("quantity")

  menu Menu @relation(fields: [menuId], references: [menuId])
  order Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade)

  @@map("OrderMenus")
}

model Review {
  reviewId   Int   @id @default(autoincrement()) @map("reviewId")
  userId     Int @map("userId")
  storeId    Int @map("storeId")
  comment    String @map("comment")
  rate       Int @map("rate")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [storeId], onDelete: Cascade)

  @@map("Reviews")
}
