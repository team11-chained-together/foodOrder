generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  name      String   @map("name")
  password  String   @map("password")
  address   String   @map("address")
  isOwner   Boolean  @map("isOwner")
  point     Int      @default(100000) @map("point")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  order     Order[]
  review    Review[]
  store     Store?

  @@map("Users")
}

model Store {
  storeId   Int      @id @default(autoincrement()) @map("storeId")
  userId    Int      @unique @map("userId")
  storeName String   @map("storeName")
  foodType  String   @map("foodType")
  sales     Int      @map("sales")
  location  String   @map("location")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  menu      Menu[]
  review    Review[]
  order     Order[]
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("Stores")
}

model Menu {
  menuId    Int        @id @default(autoincrement()) @map("menuId")
  storeId   Int        @map("storeId")
  menuName  String     @map("menuName")
  image     String     @map("image")
  price     Int        @map("price")
  stock     Int        @map("stock")
  createdAt DateTime   @default(now()) @map("createdAt")
  updatedAt DateTime   @updatedAt @map("updatedAt")
  store     Store      @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  orderMenu OrderMenu[]

  @@unique([storeId, menuName])
  @@map("Menus")
}

model Order {
  orderId   Int         @id @default(autoincrement()) @map("orderId")
  storeId   Int         @map("storeId")
  userId    Int         @map("userId")
  menuId    Int         @map("menuId")
  statement Statement   @map("statement")
  totalPrice Int        @map("totalPrice")
  createdAt DateTime    @default(now()) @map("createdAt")
  orderMenu OrderMenu[]
  review    Review?
  user      User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  store     Store       @relation(fields: [storeId], references: [storeId], onDelete: Cascade)

  @@index([userId], map: "Orders_userId_fkey")
  @@map("Orders")
}

model OrderMenu {
  orderMenuId Int   @id @default(autoincrement()) @map("orderMenuId")
  orderId     Int   @map("orderId")
  menuId      Int   @map("menuId")
  quantity    Int   @map("quantity")
  menu        Menu  @relation(fields: [menuId], references: [menuId])
  order       Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade)

  @@index([orderId], map: "OrderMenus_oderId_fkey")
  @@map("OrderMenus")
}

model Review {
  reviewId  Int      @id @default(autoincrement()) @map("reviewId")
  orderId   Int      @unique @map("orderId")
  userId    Int      @map("userId")
  storeId   Int      @map("storeId")
  comment   String   @map("comment")
  rate      Int      @map("rate")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  order     Order    @relation(fields: [orderId], references: [orderId])
  store     Store    @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([storeId], map: "Reviews_storeId_fkey")
  @@index([userId], map: "Reviews_userId_fkey")
  @@map("Reviews")
}

enum Statement {
  PREPARE
  IN_DELIVERY
  DELIVERY_COMPLETE
}
